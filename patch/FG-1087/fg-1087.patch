--- d	2011-05-09 17:20:44.049814867 -0400
+++ EucalyptusWebInterface.java	2011-04-05 15:48:03.000000000 -0400
@@ -128,7 +128,6 @@
     private static String admin_first_time_config_text;
     private static String admin_email_change_text;
 	private static String admin_cloud_ip_setup_text;
-	private static boolean enable_signups;
     private static boolean request_telephone;
     private static boolean request_project_leader;
     private static boolean request_affiliation;
@@ -261,7 +260,6 @@
         }
 
         /* optional parameters (booleans will be 'yes' if not specified) */
-        enable_signups = str2bool((String)props.get("enable-signups"));
         request_telephone = str2bool((String)props.get("request-telephone"));
         request_project_leader = str2bool((String)props.get("request-project-leader"));
         request_affiliation = str2bool((String)props.get("request-affiliation"));
@@ -380,7 +378,7 @@
         ClickListener RecoverButtonListener = new ClickListener() {
             public void onClick( Widget sender )
             {
-                displayInitiatePasswordRecoveryPage();
+                displayPasswordRecoveryPage();
             }
         };
 
@@ -417,10 +415,8 @@
 
         HorizontalPanel hpanel = new HorizontalPanel();
         hpanel.setSpacing(2);
-        if (enable_signups) {
-        	hpanel.add( signup_button );
-        	hpanel.add( new HTML("&nbsp;" + MSG.forAccount() + "&nbsp;&nbsp;|&nbsp;&nbsp;") );
-        }
+        hpanel.add( signup_button );
+        hpanel.add( new HTML("&nbsp;" + MSG.forAccount() + "&nbsp;&nbsp;|&nbsp;&nbsp;") );
         hpanel.add( recover_button );
         hpanel.add( new HTML("&nbsp;" + MSG.thePassword()) );
 
@@ -471,7 +467,7 @@
         boolean skipConfirmationChecked = previousSkipConfirmation;
 
         if (loggedInUser != null
-                && (loggedInUser.isAdministrator() != null && loggedInUser.isAdministrator())) {
+                && loggedInUser.isAdministrator()) {
             admin = true;
         } else {
             admin = false;
@@ -489,21 +485,21 @@
 		} else {
 			newUser = false;
 			oldPassword = userToEdit.getPassword();
-            isAdminChecked = userToEdit.isAdministrator() != null && userToEdit.isAdministrator();
-            showSkipConfirmed = userToEdit.isConfirmed() == null || !userToEdit.isConfirmed();
-            skipConfirmationChecked = userToEdit.isConfirmed() != null && userToEdit.isConfirmed();
+            isAdminChecked = userToEdit.isAdministrator();
+            showSkipConfirmed = !userToEdit.isConfirmed();
+            skipConfirmationChecked = userToEdit.isConfirmed();
 
             String status;
-            if (userToEdit.isApproved() == null || !userToEdit.isApproved()) {
+            if (!userToEdit.isApproved()) {
                 status = "unapproved";
-            } else if (userToEdit.isEnabled() == null || !userToEdit.isEnabled()) {
+            } else if (!userToEdit.isEnabled()) {
                 status = "disabled";
-            } else if (userToEdit.isConfirmed() == null || !userToEdit.isConfirmed()) {
+            } else if (!userToEdit.isConfirmed()) {
                 status = "unconfirmed";
             } else {
                 status = "active";
             }
-            if (userToEdit.isAdministrator() != null && userToEdit.isAdministrator()) {
+            if (userToEdit.isAdministrator()) {
                 status += " & admin";
             }
 			label_box.setText ("Editing information for user '" + userToEdit.getUserName() +"' (" + status + ")" );
@@ -551,7 +547,7 @@
         final PasswordTextBox cleartextPassword1_box = new PasswordTextBox();
 		cleartextPassword1_box.setText (userToEdit.getPassword());
         cleartextPassword1_box.setWidth ("180");
-		if ( (! admin && ! newUser ) || (userToEdit.isAdministrator() != null && userToEdit.isAdministrator().booleanValue())) {
+		if ( (! admin && ! newUser ) || userToEdit.isAdministrator().booleanValue()) {
 			cleartextPassword1_box.setEnabled (false);
 		}
         g1.setWidget( i++, 1, cleartextPassword1_box );
@@ -562,7 +558,7 @@
         final PasswordTextBox cleartextPassword2_box = new PasswordTextBox();
 		cleartextPassword2_box.setText (userToEdit.getPassword());
         cleartextPassword2_box.setWidth("180");
-		if ( ( ! admin && ! newUser ) || (userToEdit.isAdministrator() != null && userToEdit.isAdministrator().booleanValue())) {
+		if ( ( ! admin && ! newUser ) || userToEdit.isAdministrator().booleanValue()) {
 			cleartextPassword2_box.setEnabled (false);
 		}
         g1.setWidget( i++, 1, cleartextPassword2_box );
@@ -593,7 +589,7 @@
 
         /* these widgets are allocated, but not necessarily used */
         final Grid g2 = new Grid();
-        final Label label_optional = new Label( "Optional fields:" );
+        final Label label_optional = new Label ("");//new Label( "Optional fields:" );
         label_optional.setStyleName("euca-section-header");
         final TextBox telephoneNumber_box = new TextBox();
         final TextBox projectPIName_box = new TextBox();
@@ -607,9 +603,10 @@
         if (request_project_description) { extra_fields++; }
 
         if (extra_fields > 0) {
-            g2.resize(extra_fields, 2);
+            g2.resize(extra_fields, 3);
             g2.getColumnFormatter().setWidth(0, "180");
             g2.getColumnFormatter().setWidth(1, "360");
+            g2.getColumnFormatter().setWidth(2, "180");
             i = 0;
 
             if (request_telephone) {
@@ -725,6 +722,34 @@
                     g1.setWidget( emailAddress_row, 2, l );
                     formOk = false;
                 }
+		if ( telephoneNumber_box.getText().length() < 1 )
+                {
+                    Label l = new Label( "Telephone Number is empty!" );
+                    l.setStyleName("euca-error-hint");
+                    g2.setWidget( 0/*telephoneNumber_row*/, 2, l );
+                    formOk = false;
+                }
+		if ( projectPIName_box.getText().length() < 1 )
+                {
+                    Label l = new Label( "Project Leader is empty!" );
+                    l.setStyleName("euca-error-hint");
+                    g2.setWidget( 1/*projectPIName_row*/, 2, l );
+                    formOk = false;
+                }
+		if ( affiliation_box.getText().length() < 1 )
+                {
+                    Label l = new Label( "Affiliation is empty!" );
+                    l.setStyleName("euca-error-hint");
+                    g2.setWidget( 2/*affiliation_row*/, 2, l );
+                    formOk = false;
+                }
+		if ( projectDescription_box.getText().length() < 1 )
+                {
+                    Label l = new Label( "Project Description is empty!" );
+                    l.setStyleName("euca-error-hint");
+                    g2.setWidget( 3/*projectDescription_row*/, 2, l );
+                    formOk = false;
+                }
 
                 if ( formOk )
                 {
@@ -873,136 +898,23 @@
         parent.add( wrapper );
     }
 
-    public void displayInitiatePasswordRecoveryPage()
+    public void displayPasswordRecoveryPage()
     {
-        label_box.setText ("Enter the following to reset your password");
+        label_box.setText ("Please, choose the new password");
         label_box.setStyleName("euca-greeting-normal");
 
-        final Grid g1 = new Grid ( 2, 3 ); // rows, cols
+        final Grid g1 = new Grid ( 3, 3 );
         g1.getColumnFormatter().setWidth(0, "230");
         g1.getColumnFormatter().setWidth(1, "180");
         g1.getColumnFormatter().setWidth(2, "180");
         int i = 0;
 
-        final int username_row = i;
-        g1.setWidget( i, 0, new Label( "Username:" ) );
+        final int usernameOrEmail_row = i;
+        g1.setWidget( i, 0, new Label( "Username OR email address:" ) );
         g1.getCellFormatter().setHorizontalAlignment(i, 0, HasHorizontalAlignment.ALIGN_RIGHT);
-        final TextBox username_box = new TextBox();
-        username_box.setWidth("180");
-        g1.setWidget( i++, 1, username_box );
-
-        final int email_row = i;
-        g1.setWidget( i, 0, new Label( "Email address:" ) );
-        g1.getCellFormatter().setHorizontalAlignment(i, 0, HasHorizontalAlignment.ALIGN_RIGHT);
-        final TextBox email_box = new TextBox();
-        email_box.setWidth("180");
-        g1.setWidget( i++, 1, email_box );
-
-        ClickListener RecoverButtonListener = new ClickListener() {
-            public void onClick( Widget sender )
-            {
-                boolean formOk = true;
-
-                for ( int j = 0; j < 2; j++ )
-                {
-                    g1.clearCell( j, 2 ); // clear previous right-hand-side annotations 
-                }
-
-                // perform checks
-                if ( username_box.getText().length() < 1 )
-                {
-                    Label l = new Label( "Username is empty!" );
-                    l.setStyleName("euca-error-hint");
-                    g1.setWidget( username_row, 2, l);
-                    formOk = false;
-                }
-				if ( username_box.getText().matches(".*[ \t]+.*") ) {
-					Label l = new Label ("Username cannot have spaces, sorry!");
-					l.setStyleName ("euca-error-hint");
-					g1.setWidget (username_row, 2, l);
-					formOk = false;
-				}
-                if ( ! email_box.getText().contains("@") )
-                {
-                    Label l = new Label( "Valid email is mandatory!" );
-                    l.setStyleName("euca-error-hint");
-                    g1.setWidget( email_row, 2, l );
-                    formOk = false;
-                }
-
-                if ( formOk )
-                {
-                    label_box.setText( "Checking with the server..." );
-                    label_box.setStyleName("euca-greeting-pending");
-
-                    UserInfoWeb user = new UserInfoWeb(
-                            username_box.getText(),
-                            "", // don't care about real name
-                            email_box.getText(),
-                            null ); // null => reset requested
-                    EucalyptusWebBackend.App.getInstance().recoverPassword(
-                            user,
-                            new AsyncCallback() {
-                                public void onSuccess( Object result )
-                                {
-                                    displayDialog( "Thank you!", ( String ) result );
-                                }
-
-                                public void onFailure( Throwable caught )
-                                {
-                                    String m = caught.getMessage();
-                                	displayErrorPage(m);
-                                }
-                            }
-                    );
-
-                }
-                else
-                {
-                    label_box.setText( "Please, fix the errors and resubmit:" );
-                    label_box.setStyleName("euca-greeting-warning");
-                }
-            }
-        };
-
-        Button submit_button = new Button ( "Recover Password", RecoverButtonListener );
-        Button cancel_button = new Button ( "Cancel", DefaultPageButtonListener );
-        VerticalPanel mpanel = new VerticalPanel();
-        mpanel.add( g1 );
-
-        HorizontalPanel bpanel = new HorizontalPanel();
-        bpanel.add( submit_button );
-        bpanel.add( new HTML( "&nbsp;&nbsp;or&nbsp;&nbsp;" ) );
-        bpanel.add( cancel_button );
-
-        VerticalPanel vpanel = new VerticalPanel();
-        vpanel.setSpacing(15);
-        vpanel.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_CENTER);
-        if (logo!=null) { vpanel.add (logo); }
-        vpanel.add (label_box);
-        vpanel.add (mpanel);
-        vpanel.add (bpanel);
-
-        VerticalPanel wrapper = new VerticalPanel();
-        wrapper.add (vpanel);
-        wrapper.setSize("100%", "100%");
-        wrapper.setCellHorizontalAlignment(vpanel, VerticalPanel.ALIGN_CENTER);
-        wrapper.setCellVerticalAlignment(vpanel, VerticalPanel.ALIGN_MIDDLE);
-
-        RootPanel.get().clear();
-        RootPanel.get().add( wrapper );
-    }
-    
-    public void displayCompletePasswordRecoveryPage(final String code)
-    {
-        label_box.setText ("Please, choose the new password");
-        label_box.setStyleName("euca-greeting-normal");
-
-        final Grid g1 = new Grid ( 2, 3 ); // rows, cols
-        g1.getColumnFormatter().setWidth(0, "230");
-        g1.getColumnFormatter().setWidth(1, "180");
-        g1.getColumnFormatter().setWidth(2, "180");
-        int i = 0;
+        final TextBox usernameOrEmail_box = new TextBox();
+        usernameOrEmail_box.setWidth("180");
+        g1.setWidget( i++, 1, usernameOrEmail_box );
 
         final int password1_row = i;
         g1.setWidget( i, 0, new Label( "New password:" ) );
@@ -1023,11 +935,27 @@
             {
                 boolean formOk = true;
 
-                for ( int j = 0; j < 2; j++ )
+                for ( int j = 0; j < 3; j++ )
                 {
-                    g1.clearCell( j, 2 ); // clear previous right-hand-side annotations
+                    g1.clearCell( j, 2 ); /* clear previous right-hand-side annotations */
                 }
 
+                /* perform checks */
+                if ( usernameOrEmail_box.getText().length() < 1 )
+                {
+                    Label l = new Label( "Username is empty!" );
+                    l.setStyleName("euca-error-hint");
+                    g1.setWidget( usernameOrEmail_row, 2, l);
+                    formOk = false;
+                }
+				/* no spaces in username */
+				if ( usernameOrEmail_box.getText().matches(".*[ \t]+.*") ) {
+					Label l = new Label ("Username cannot have spaces, sorry!");
+					l.setStyleName ("euca-error-hint");
+					g1.setWidget (usernameOrEmail_row, 2, l);
+					formOk = false;
+				}
+
                 if ( cleartextPassword1_box.getText().length() < minPasswordLength )
                 {
                     Label l = new Label( "Password must be at least " + minPasswordLength + " characters long!" );
@@ -1042,15 +970,24 @@
                     g1.setWidget( password2_row, 2, l );
                     formOk = false;
                 }
+                if ( cleartextPassword1_box.getText().toLowerCase().matches(".*" +
+                        usernameOrEmail_box.getText().toLowerCase() + ".*")) {
+                    Label l = new Label ( "Password may not contain the username!");
+                    l.setStyleName("euca-error-hint");
+                    g1.setWidget( password1_row, 2, l );
+                    formOk = false;
+                }
 
                 if ( formOk )
                 {
                     label_box.setText( "Checking with the server..." );
                     label_box.setStyleName("euca-greeting-pending");
 
-                    UserInfoWeb user = new UserInfoWeb();
-                    user.setConfirmationCode(code);
-                    user.setPassword(GWTUtils.md5(cleartextPassword1_box.getText()));
+                    UserInfoWeb user = new UserInfoWeb(
+                            usernameOrEmail_box.getText(),
+                            "", /* don't care about the name */
+                            usernameOrEmail_box.getText(), /* same as login */
+                            GWTUtils.md5(cleartextPassword1_box.getText()) );
                     EucalyptusWebBackend.App.getInstance().recoverPassword(
                             user,
                             new AsyncCallback() {
@@ -1076,7 +1013,7 @@
             }
         };
 
-        Button submit_button = new Button ( "Change Password", RecoverButtonListener );
+        Button submit_button = new Button ( "Recover Password", RecoverButtonListener );
         Button cancel_button = new Button ( "Cancel", DefaultPageButtonListener );
         VerticalPanel mpanel = new VerticalPanel();
         mpanel.add( g1 );
@@ -1236,7 +1173,7 @@
                 || action.equals ( "enable" ) )
         {
             String userName = ( String ) urlParams.get( "user" );
-            if ( loggedInUser.isAdministrator() == null || !loggedInUser.isAdministrator().booleanValue() )
+            if ( !loggedInUser.isAdministrator().booleanValue() )
             {
                 displayErrorPage( "Administrative privileges required" );
             }
@@ -1254,7 +1191,7 @@
                 || action.equals ( "enable_image") )
         {
             String imageId = ( String ) urlParams.get ("id");
-            if ( loggedInUser.isAdministrator() == null || !loggedInUser.isAdministrator().booleanValue() )
+            if ( !loggedInUser.isAdministrator().booleanValue() )
             {
                 displayErrorPage( "Administrative privileges required" );
             }
@@ -1270,18 +1207,14 @@
         else if ( action.equals( "confirm" )
  			|| action.equals ("recover") )
         {
-            String code = ( String ) urlParams.get( "code" );
-            if ( code == null )
+            String confirmationCode = ( String ) urlParams.get( "code" );
+            if ( confirmationCode == null )
             {
                 displayErrorPage( "Confirmation code not specified" );
             }
             else
             {
-            	if (action.equals( "confirm" )) {
-            		attemptAction( action, code );
-            	} else if (action.equals( "recover")) {
-            		displayCompletePasswordRecoveryPage(code);
-            	}
+                attemptAction( action, confirmationCode );
             }
         }
         else
@@ -1307,9 +1240,9 @@
         }
 
         if (loggedInUser!=null) {
-            if ( loggedInUser.isAdministrator() != null && loggedInUser.isAdministrator().booleanValue() )
+            if ( loggedInUser.isAdministrator().booleanValue() )
             {
-                if (loggedInUser.getEmail().equalsIgnoreCase( UserInfoWeb.BOGUS_ENTRY ) ) {
+                if (loggedInUser.getEmail().equalsIgnoreCase( "" ) ) {
                     displayFirstTimeConfiguration();
                 } else {
                     displayBarAndTabs(message);
@@ -1431,7 +1364,7 @@
         allTabs.addTab ("Credentials"); credsTabIndex = nTabs++;
         allTabs.addTab ("Images"); imgTabIndex = nTabs++;
         /////allTabs.addTab ("Instances"); instTabIndex = nTabs++;
-        if (loggedInUser.isAdministrator() != null && loggedInUser.isAdministrator().booleanValue()) {
+        if (loggedInUser.isAdministrator().booleanValue()) {
 			allTabs.addTab ("Users"); usrTabIndex = nTabs++;
 			allTabs.addTab ("Configuration"); confTabIndex = nTabs++;
             allTabs.addTab ("Extras"); downTabIndex = nTabs++;
@@ -1669,7 +1602,7 @@
         });
 
 		int gridRows = 3;
-		if (loggedInUser.isAdministrator() != null && loggedInUser.isAdministrator() && show_cloud_registration) {
+		if (loggedInUser.isAdministrator() && show_cloud_registration) {
 			gridRows++;
 		}
 		credspanel.add(ppanel);
@@ -1693,7 +1626,7 @@
 //        g.setWidget( 2, 0, rpanel ); g.getCellFormatter().setVerticalAlignment(2, 0, HasVerticalAlignment.ALIGN_TOP);
 //		g.setWidget( 2, 1, secretButton ); g.getCellFormatter().setVerticalAlignment(2, 1, HasVerticalAlignment.ALIGN_TOP);
 
-		if (loggedInUser.isAdministrator() != null && loggedInUser.isAdministrator() && show_cloud_registration) {
+		if (loggedInUser.isAdministrator() && show_cloud_registration) {
 	        VerticalPanel cloud_panel = new VerticalPanel();
 			cloud_panel.setSpacing (0);
 	        cloud_panel.add( new HTML (cloud_registration_text) );
@@ -1966,7 +1899,7 @@
                                 }
                                 public void onFailure( Throwable caught )
                                 {
-                                    loggedInUser.setEmail( UserInfoWeb.BOGUS_ENTRY );
+                                    loggedInUser.setEmail( "" );
                                     displayLoginErrorPage( caught.getMessage() );
                                 }
                             });
@@ -2257,16 +2190,16 @@
 				Label nameLabel = new Label(u.getRealName());
                 g.setWidget(row, 3, nameLabel);
                 String status;
-                if (u.isApproved() == null || !u.isApproved().booleanValue()) {
+                if (!u.isApproved().booleanValue()) {
                     status = "unapproved";
-                } else if (u.isEnabled() == null || !u.isEnabled().booleanValue()) {
+                } else if (!u.isEnabled().booleanValue()) {
                     status = "disabled";
-                } else if (u.isConfirmed() == null || !u.isConfirmed().booleanValue()) {
+                } else if (!u.isConfirmed().booleanValue()) {
                     status = "unconfirmed";
                 } else {
                     status = "active";
                 }
-                if (u.isAdministrator() != null && u.isAdministrator().booleanValue()) {
+                if (u.isAdministrator().booleanValue()) {
                      status += " & admin";
                 }
                 g.setWidget(row, 4, new Label(status) );
@@ -2281,11 +2214,11 @@
 				ops.add(editLabel);
 
 				// admin can't be disabled or deleted (that breaks things)
-				if (u.isAdministrator() == null || !u.isAdministrator().booleanValue()) {
+				if (!u.isAdministrator().booleanValue()) {
 					HTML act_button = userActionButtonNoReload ("Disable", u, parent);
-	                if (u.isApproved() == null || !u.isApproved().booleanValue()) {
+	                if (!u.isApproved().booleanValue()) {
 	                    act_button = userActionButtonNoReload ("Approve", u, parent);
-	                } else if (u.isEnabled() == null || !u.isEnabled().booleanValue()) {
+	                } else if (!u.isEnabled().booleanValue()) {
 	                    act_button = userActionButtonNoReload ("Enable", u, parent);
 	                }
 	                ops.add(act_button);
@@ -2332,7 +2265,7 @@
         parent.clear();
         int nimages = imagesList.size();
         boolean showActions = false;
-        if (loggedInUser.isAdministrator() != null && loggedInUser.isAdministrator().booleanValue()) {
+        if (loggedInUser.isAdministrator().booleanValue()) {
             showActions = true;
         }
 
@@ -2624,7 +2557,7 @@
     						}
     						public void onFailure( Throwable caught )
     						{
-    							loggedInUser.setEmail( UserInfoWeb.BOGUS_ENTRY );
+    							loggedInUser.setEmail( "" );
     							String m = caught.getMessage();
     							label_box.setText( m );
     							label_box.setStyleName("euca-greeting-warning");
